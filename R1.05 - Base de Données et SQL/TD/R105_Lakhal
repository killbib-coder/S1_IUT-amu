##################################################
TD1
##################################################
..) voir feuille
18) R1 = selection ( pilote/nonpil = martin )
	R2 = jointure ( pilote, R1/adr = adr )
	R3 = projection ( R2, numpil, nompil, numpil )
	R4 = jointure ( pilote, R1/ sal>sal ) 
	R5 = projection ( R4, numpil, nompil, numpil )
	R6 = intersection ( R3, R5 )
	R7 = projection ( R6, numpil , nompil )
19) R1 = jointure ( pilote, numpil, ADR)
	R2 = jointure ( vol, numpil, ville_dep )
	R3 = intersection ( R1,R2 )
	R4 = jointure (pilote, R3 / numpil=numpil)
	R5 = projection ( R4,numpil,nompil)
20) R1 = jointure ( pilote, pilote/nompil = nompil )
	R2 = jointure ( R1, pilote / numpil = numpil )
	R3 = difference ( R1,R2 )
	R4 = projection ( R3, numpil, nompil )
21) R1 = selection (vol / ville_dep='Lyon')
	R2 = projection (R1, numpil)
	R3 = projection (pilote, numpil)
	R4 = difference (R3, R2)
	R5 = jointure (pilote, R4 / numpil=numpil)
	R6 = projection (R5, numpil, nompil)
22) R1 = projection (pilote, ADR)
	R2 = projection (vol, ville_dep)
	R3 = difference (R1,R2)

##################################################
TD2
##################################################
01) Oui si la date est différente (clé primaire)
02) Non car la même date est pas possible (clé primaire)
03) Numpil + date + type_f
04) R1 = projection (vol, numpil, numav)
	R2 = projection (pilote, numpil)
	R3 = division (R1, R2 / numpil=numpil)
	R4 = jointure (R3, avion / numav=numav)
	R5 = projection (R4, numav, nomav)
05) R1 = jointure (vol, avion / numav=numav)
	R2 = projection (vol, nomav, ville_arr)
	R3 = projection (avion, nomav)
	R4 = division (R1, R2 / nomav=nomav)
06) R1 = selection (pilote / nompil='Dupond')
	R2 = jointure (R1, formation / numpil=numpil)
	R3 = jointure (R2, stage / type_f=type_f)
	R4 = projection (R3, nomav)
07) R1 = projection (avion, numav)
    R2 = jointure (formation, stage | type_f = type_f)
    R3 = projection (R2, numpil,nomav)
    R4 = division (R3,R1 | nomav = nomav)
    R5 = jointure (pilote, R4 | numpil = numpil)
    R6 = projection (R5, nompil) 
08) R1 = projection (vol, ville_dep, ville_arr)
	R2 = projection (vol, ville_dep)
	R3 = division (R1, R2 / ville_dep, ville_dep)
09) R1 = selection (formation / numpil=104) 
	R2 = jointure (R1, stage / type_f=type_f)
	R3 = projection (R2, nomav)
	R4 = jointure (formation, stage / type_f=type_f)
	R5 = projection (R4, numpil=numav)
	R6 = division (R5, R3 / nomav, nomav)
	R7 = jointure (pilote, numpil=numpil)
	R8 = projection (R7, nompil, ADR)
10) R1 = projection (formation, numpil)
	R2 = projection (pilote, numpil)
	R3 = difference (R2, R1)
	R4 = jointure (R5, pilote / numpil=numpil)
	R5 = projection (R4, nompil, ADR)
11) Non car un seul appart
12) code_p ne doit pas être changé sans changer appartement
13) oui dans deux locataires ou propriétaires peuvent avoir les mêmes noms
14) R1 = selection (proprio / nom='Martin')
	R2 = selection (R1 / prenom='Jean')
	R3 = jointure (R2, Appart / codeL=code)
	R4 = selection (R3, num, type)
15) R1 = projection (locataires, nom, prenom)
	R2 = intersection (R1, proprio)
	R3 = projection (R2, nom)

17) R1 = jointure (appart, locataire / code=code_L)
	R2 = jointure (Appart, proprio / code=code_P)
	R3 = union (R1, R2)
	R4 = difference (appart, R3)
18) R1 = projection (appart, type)
	R2 = projection (appart, type, code)
	R3 = division (R2, R1 / type, type)
	R4 = jointure (R3, proprio / code=codeP)
	R5 = projection (R4, nom, prenom)
19) R1 = projection (proprio, D_code)
	R2 = projection (locataires, d_code)
	R3 = difference (R1, R2)


Uni-compatible = mm nb d'attribut + attribut respectif comparable
contrainte clé/ de relation = Au moment d'une nouvelle insertion les clé primaire ne se repète pas 
contrainte de domaine = Bon format de l'entré par rapport au type


########################################################################
Révision partiel
########################################################################

A|B Valeurs différentes A et B
1|2 1
1|1 2
3|1 3
1|1
5|1 4
A -> B est vrai que si deux premiers tuples sont égaux
cardinal = nb éléments
Nb de valeurs différentes dans les colones
|R(A)| = R(A,B)
colone A = colone A et B
3 valeurs différentes != 4 valeurs différentes 
Dépendence fonctionnel:
	Reflexivité:
	X -> X
	Augementation:
	Si X -> Y
	   X,Z -> Y
	Union:
	Si X -> Y et
	   X -> Z
	   X -> Y,Z
	Transitivité:
	Si X -> Y et
	   Y -> Z
	   X -> Z
	Pseudo-transitivité:
	Si X -> Y et 
	   Y,Z -> T
	   X,Z -> T
	Décomposition:
	Si X -> Y,Z
	   X -> Y
	   X -> Z
Clé primaire:
	R(A,B,C,D,E) F={A->C; B->E; E->B; D->A}
	Clé candidate:
		La clé determine tous les élements donc
		A,B,C,D,E -> A,B,C,D,E
		Pour chaque élément A,B,C,D,E
		on va regarder si il est necessaire => Si un élement determine Elem_gauche -> Elem_droite, Elem_droite vire
	Clé candidates minimal:
		A,B -> Tous Il faut qu'il n'y est pas le même tuple
		A,C -> Tous
		A,D -> Tous
		A,E -> Tous
		B,C -> Tous
		B,D -> Tous Si n'a pas de tuple identique entre les deux = clé primaire
		B,E -> Tous
		C,D -> Tous
		C,E -> Tous
		D,E -> Tous Si n'a pas de tuple identique entre les deux = clé primaire
		Clé primaire = soit B,D soit D,E
	Clé primaire:
		Est-ce que: A -> A,B,C,D,E |R(A)| ?= Nb tuples
		Est-ce que: B -> A,B,C,D,E |R(B)| ?= Nb tuples
		Est-ce que: C -> A,B,C,D,E |R(C)| ?= Nb tuples
		Est-ce que: D -> A,B,C,D,E |R(D)| ?= Nb tuples
		Est-ce que: E -> A,B,C,D,E |R(E)| ?= Nb tuples
Normalisation des relations:
	1NF: Tous les attributs de R sont mono-valeur (ils ont qu'une valeur)
	2NF: - R est en 1NF
		 - Pas de DFs interdites de type 2NF: X(partie de clé primaire) -> A(apartient pas a la clé)
	3NF: - R est en 2NF
		 - Pas de DFs interdites de type 3NF: X(n'est pas clé / comporte pas la clé) -> A(appartient pas a a clé)
	ex: R(A,B,C,D,E) F={A->C; B->E; E->B; D->A}
		1NF R(D,E ,A,B,C)
		2NF R1(D,A,C) > D->A,C > R(D,E ,A,B,C) > -(A,C) > R2(D,E,B)
		3NF R11(A,C) > A->C > R1(D,A,C) > -C > R12(D,A#) 
		3NF R21(E,B) > E->B > R2(D,E,B) > -B > R22(D#,E#)
		# étant clé étrangère



########################################################################
Exercice Séance 3
########################################################################

Exo 1:
Q1: Nb tuples = 5
	|R(A)|=4  
	|R(B)|=3
	|R(C)|=3
	|R(D)|=3
	Aucune clé primaire
Q2: A,B O; A,C X; A,D O; B,C X; B,D O; C,D X

Exo2:
Q3: NUM_PIECE -> LIBELLE -> CATEGORIE -> TAUX_TVA donc
	NUM_PIECE -> TAUX_TVA
Q4: NUM_PIECE -> PRIX, LIBELLE
Q5: PRIX X; TAUX_TVA X; CATEGORIE X; LIBELLE X donc
	Clé primaire est NUM_PIECE

Exo3:
Q6: X: O; Q; B; D
	V: I S / I D
Q7: R(B,O,I,S,Q,D) F={S->D; I->B; I,S->Q; B->O; D->S}
	1NF R(I,S ,B,O,Q,D)
	2NF R1(I,B,O) > I->B,O > R(I,S ,B,O,Q,D) > -(B,O) > R2(I,S,Q,D)
	3NF R11(B,O) > B->O > R1(I,B,O) > -O > R12(I,B#)
	3NF R21(S,D) > S->D > R2(I,S,Q,D) > -D > R22(I#,S#,Q)
Q8: R11(B,O) R12(I,#b) R21(D,S) R22(I#,D#,Q)

Exo4:

Exo5:
Q15:R1 1NF
	R2 2NF
Q16:R11 2NF
	R12 3NF
	R21 3NF
	R22 3NF
Q17:

Exo6:
Q1: Cas 1: PERSONNE(_CODE_,NOM,PRENOM,CAT1,CAT2,CAT3)
	Cas 2: CATEGORIE(CODE,CAT)
Q2: VILLE,SURFACE -> COEF


Etape création BD:
	Cahier des charges --Modèle E/A--> Schéma conceptuel E/A ou Diagramme en E/1
	--Règles (3) de traduction--> Schéma relationnel en 3NF --Clauses SQL--> Script SQL schéma/donnés
	--Oracle SQL developer--> SGBD (Système de Gestion de Bases de Données)

TA non-hiérarchique:
	max=n | attribut spécifique (des 2 côtés)
Ternaire est focément max=n
TA hiérarchique:
	max=1 (1 ou 2 côtés)
Règles TE/TA regarder memento

Séance 4:
Q1: a) Num_immat -> puissance, Marque
	b) Marque -> Pays
	c) Agence, Marque -> Chiffre_Aff
	d) Agence !-> Marque, Marque !-> Agence
Q2: Vehicule - 1,1 - O - 1,n - Marques
				   avoir

########################################################################
Intro SQL
########################################################################

Q01: SELECT * FROM AVION WHERE CAP >= 350 ;
Q02: SELECT NUMAV, NOMAV FROM AVION WHERE LOC=NICE;
Q03: select numpil, ville_dep from vol; 
Q04: select nompil from pilote where adr='Paris' and sal>=3500;
Q05: select numav, nomav from avion where loc='Nice' or cap<=350;
Q06: select numvol from vol where ville_dep='Nice' and ville_arr='Paris' and h_dep>=18;
Q07: select numvol, ville_dep from vol where numpil=100 or numpil=204;
     select numvol, ville_dep from vol where numpil in (100,204);
Q08: select count(numvol) from vol where ville_arr='Paris';
Q09: select count(distinct numpil) from vol where ville_dep='Paris';
Q10: select avg(sal) from pilote where adr='Marseille';

Q11:Formulation prédicative:
		select distinct numvol
		from vol V, pilote
		where ville_dep='Nice' and adr='Marseille' and V.numpil=pilote.numpil
	Formulation imbriquée:
		select numvol 
		from vol
		where numpil in (select numpil
						 from pilote
						 where adr='Mareseille');
	Formulation algébrique:
		select distinct numvol 
		from vol
		join pilote
		on vol.numpil=pilote.numpil
		where ville_dep='Nice' and adr='Marseille';

Q12: select numvol, ville_dep, ville_arr
	 from vol, avion
	 where loc!='Nice' and vol.numav=avion.numav;

Q13: select numpil
	 from pilote, vol
	 where pilote.numpil not in vol.numpil and pilote.numpil=vol.numpil;

Q14: select numpil, nompil
	 from pilote, vol, avion
	 where ville_dep='Nice' and cap>=300 and pilote.numpil=vol.numpil and vol.numav=avion.numav;

Q15: select nompil
	 from pilote, vol, avion
	 where adr='Paris' and ville_dep='Nice' and nomav='Airbus' and vol.numpil=pilote.numpil and vol.numav=avion.numav

Q16: select numvol
	 from vol, pilote, avion
	 where adr='Nice' and (ville_dep='Nice' or ville_arr='Nice') and loc='Paris' and vol.numpil=pilote.numpil and vol.numav=avion.numav

Q17: select numpil, nompil
	 from pilote P1, pilote P2 
	 where P1.nompil='Dupont' and P1.adr=P2.adr   