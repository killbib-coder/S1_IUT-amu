Partiel n°1 R1.01

15 erreurs:
	trouver + justifier 1 pts
	trouver 0,5 pts
	touve une erruer pas une erreur: ignorer

	-Pas type tableau L1
	-Pas de r dans entier natuRel
	-Pas d'initialisation de n
	-Pas de "" et ; L6 (deux fautes)
	-Tanque au lieu de tant_que L8
	-{} au lieu de faire ffaire L9
	-Manque virgule i , "eme elem" L10
	-++i existe pas L12
	-Renvoie rien dans procedure L14
	-Point virgule a fin
	-Point virgule après déclaration fonction L18
	-pas de ; L21
	-T <- T1 impossible
	-Point virgule L23
	-Variant_de sans tiret L25
	-Manque -1 L25
	-= existe pas L27
	-Fin au lieu de ffaire L28
	-Algorithme prend pas majuscule L32
	-Pas de nom d'algo L32
	-= existe pas L39
	-Variant_de sans _ L41
	-taille()-1 L41
	-Manque parenthèse L43
	-fin au lieu de ffaire L44
	-Point virgule en trop L45

Qu'est-ce qu'il fait:
	Faire trace algo
	La procedure EtudiantBonOuPas ne renvoie rien donc algorithme s'arrête et affiche une erreur
	Résultat: sa plante

	Justifier le pourquoi ca affiche une erreur

Cryptage César:
	procedure DecrypteCesar ( Str : in string , str2 : out string);

	fonction MySucc (C : in caractere ) renvoie caractere
	debut
		si (C vaut 'Z') renvoie 'A';
		sinon_si (C vaut 'z') renvoie 'a';
		sinon renvoie succ(C);
		fsi
	fin

	 fonction IsAlpha (C : in caractere ) renvoie booleen 
	 debut
	 	renvoie (isUpper (C) OU_SINON isLower(C));
	 fin

	 fonction IsAlpha (C : in caractere ) renvoie booleen 
	 debut
	 	declarer alphabet : string <- "abc...xyzABC...XYZ";
	 	renvoie (trouveCarDansString (C, alphabet) ne_vaut_pas taille (alphabet));
	 fin

	 fonction IsAlpha (C : in caractere ) renvoie booleen 
	 debut
	 	declarer alphabet : string <- "abc...xyzABC...XYZ";
	 	declarer i : entier_naturel <- 0;
	 	tant_que (i < taille (alphabet))
	 	faire
	 		si (C vaut alphabet[i]) sortie;
	 		i <- i + 1;
	 	ffaire
	 	renvoie (i ne_vaut_pas taille (alphabet));
	 fin

	fonction DecrypteCesar ( Str : in string ) renvoie string
	debut
		declarer chaineDecryptee : string;
		pour (i variant_de 0 a taille (Str) - 1)
		faire
			si (IsAlpha (str[i]))
				chaineDecryptee <- chaineDecryptee + MyPred (Str[i]);
			fsi
		ffaire
		renvoie chaineDecryptee;
	fin

	fonction DecrypteCesar ( Str : in string ) renvoie string
	debut
		declarer chaineDecryptee : string;
		redimensionner (chaineDecryptee, taille (Str));
		pour (i variant_de 0 a taille (Str) - 1)
		faire
			si (IsAlpha (str[i]))
				chaineDecryptee [i]<- MyPred (Str[i]);
			fsi
		ffaire
		renvoie chaineDecryptee;
	fin

	Un geek ne crie pas il URL


	algorithme cesar1
	debut
		boucle
			Afficher ("Saisir une string :  ");
			declarer strACrypter : string;
			saisir (strACrypter);
			si (taille (strACrypter) vaut 0) sortie;
			declarer chaineDecryptee : string <- CrypteCesar (strACrypter);
			si (DecrypteCesar (chaineDecryptee) ne_vaut_pas strACrypter) sortie;
		fboucle
		
	fin

	fonction CrypteCesar2 ( Str : in string , Cle : in entier_naturel ) renvoie string 
	debut
		declarer chaineCryptee : string;
		pour (i variant_de 0 a taille (Str) - 1)
		faire
			si (IsAlpha (str[i]))
				declarer c : caractere <- str[i];
				pour (j variant_de 0 a cle)
				faire 
					c <- MySucc (c);
				ffaire
				chaineDecryptee <- chaineDecryptee + c;
			fsi
		ffaire
		renvoie chaineCryptee;
	fin

	fonction CrypteCesar3 ( Str : in string ) renvoie string 
	declarer chaineCryptee : string
	debut
		pour (i variant_de 0 a taille (Str) - 1)
		faire
			declarer c : caractere <- str[i];
			pour (j variant_de 0 a i)
			faire 
				c <- MySucc (c);
			ffaire
			chaineDecryptee <- chaineDecryptee + c;
		ffaire
		renvoie chaineCryptee;
	fin

	fonction CrypteCesar4 ( Str : in string ) renvoie string 
	declarer chaineCryptee : string
	debut
		pour (i variant_de 0 a taille (Str) - 1)
		faire
			declarer c : caractere <- str[i];
			si (modulo (i, 2) vaut 0)
				c <- MySucc (c);
			sinon
				c <- MyPred (c);
			fsi
			chaineDecryptee <- chaineDecryptee + c;
		ffaire
		renvoie chaineCryptee;
	fin


	fonction CrypteCesar5 ( Str : in string ) renvoie string 
	declarer chaineCryptee : string
	debut
		pour (i variant_de 0 a taille (Str) - 1)
		faire
			declarer c : caractere <- str[i];
			si (modulo (i, 2) vaut 0)
				pour (j variant_de 0 a i)
				faire 
					c <- MySucc (c);
				ffaire
			sinon
				pour (j variant_de 0 a i)
				faire 
					c <- MyPred (c);
				ffaire
			fsi
			chaineDecryptee <- chaineDecryptee + c;
		ffaire
		renvoie chaineCryptee;
	fin